## fit the runaway growth of particles
import physics 
Hd = []
mass0=[]
Hg= []
St = []
dmdt = []
vr = []

    Hd.append(physics.H_d(system.particles.Hg, system.particles.St, 5e-5)[0])
    mass0.append(system.particles.massL[0])
    Hg.append(system.particles.Hg[0])
    St.append(system.particles.St[0])
    vr.append(system.particles.v_r[0])
    dmdt.append((system.particles.massL[0]-system.oldstate.particles.massL[0])/system.deltaT)

    if system.Moutflux >0:
        Hd = np.array(Hd) 
        mass0 = np.array(mass0)
        St = np.array(St)
        dmdt = np.array(dmdt)
        vr = -np.array(vr)
        #fit the Hd to the mass with Hd = m^{-1/6}
        def fitfunc(x, a):
            return a*x**(-1/3)

        def fitSt(x, a, b): 
            return a*x**(b)

        def fithdst(x, a):
            return a*x**(-1/2)

        def fitdmdt(x, a):
            return a*x**(5/3)

        def fitvr(x, a):
            return a*x 
        

        from scipy.optimize import curve_fit 
        poptSt, pcov = curve_fit(fitSt, mass0, St)
        poptvr, pcov = curve_fit(fitvr, St, vr)
        poptHd,pcov = curve_fit(fithdst, St, Hd)
        poptdmdt, pcov = curve_fit(fitdmdt, mass0, dmdt)

        #plot fitresults 
        fig, (ax1, ax2, ax3, ax4) = plt.subplots(4,1, figsize=(6,12)) 

        ax1.loglog(mass0, St, 'o', label='data') 
        ax1.loglog(mass0, fitSt(mass0, *poptSt), 'r-', label='p={:.2f}'.format(poptSt[1]))
        ax1.set_xlabel('mass0')
        ax1.set_ylabel('St')
        ax1.legend()

        ax2.loglog(St, vr, 'o', label='data')
        ax2.loglog(St, fitvr(St, *poptvr), 'r-', label='p=1')
        ax2.set_xlabel('St')
        ax2.set_ylabel('vr')
        ax2.legend()

        ax3.loglog(St, Hd, 'o', label='data')
        ax3.loglog(St, fithdst(St, *poptHd), 'r-', label='p=-1/2')
        ax3.set_xlabel('St')
        ax3.set_ylabel('Hd')
        ax3.legend()

        ax4.loglog(mass0, dmdt, 'o', label='data')
        ax4.loglog(mass0, fitdmdt(mass0, *poptdmdt), 'r-', label='p=5/3')
        ax4.set_xlabel('mass0')
        ax4.set_ylabel('dmdt')
        ax4.legend()

        plt.savefig('fitresults.jpg')
        plt.close()

        import pdb; pdb.set_trace()


## calculate the Toomre Q
    import physics
    sigmaG, temp = system.gas.get_key_disk_properties(system.particles.locL, 2e6*cgs.yr)[0:2]
    cs = np.sqrt(cgs.kB*temp/system.particles.mg)
    Omegak = physics.Omega_K(system.particles.locL, cgs.MJ)
    tooq = cs*Omegak/(np.pi*cgs.gC*sigmaG)
    import pdb;pdb.set_trace()

